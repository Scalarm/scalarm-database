#Attributes:
#“_id”: ObjectId
#“index”: integer
#“experiment_id” - ObjectId
#“to_sent” - bool
#“sent_at”: timestamp
#“is_done”: bool
#“done_at”: timestamp
#“run_index”: integer
#“arguments”: string - list of concatenated parameter ids
#“values”: string - list of concatenated parameter values
#“result”: JSON structure generated by simulation

require_relative '../core/mongo_active_record'

module Scalarm::Database::Model
  class SimulationRun < Scalarm::Database::MongoActiveRecord

    # TODO: make factory? a class without @experiment_id makes no sense
    def self.for_experiment(experiment_id)
      @experiment_id = experiment_id

      self
    end

    # TODO?
    def self.collection_name
      "experiment_instances_#{@experiment_id}"
    end

    def where(conditions, options)
      super(conditions, {sort: [['index', :asc]]}.merge(options))
    end

    def self.create_table_for_experiment(experiment_id)
      @experiment_id = experiment_id

      raise('No Simulation Run DB available') if collection.nil?

      %w(index is_done to_sent).each do |index_sym|
        unless collection.index_information.include?(index_sym.to_s)
          collection.create_index([[index_sym.to_s, Mongo::ASCENDING]])
        end
      end

      # sharding collection
      cmd = BSON::OrderedHash.new
      cmd['enableSharding'] = collection.db.name
      begin
        MongoActiveRecord.execute_raw_command_on('admin', cmd)
      rescue Exception => e
        Rails.logger.error(e)
      end

      cmd = BSON::OrderedHash.new
      cmd['shardcollection'] = "#{collection.db.name}.#{collection_name}"
      cmd['key'] = {'index' => 1}
      begin
        MongoActiveRecord.execute_raw_command_on('admin', cmd)
      rescue Exception => e
        Rails.logger.error(e)
      end
    end

    def save
      SimulationRun.for_experiment(experiment_id)
      super
    end

    def meet_constraints?(constraints)
      return true if constraints.blank?

      args = arguments.split(',')
      vals = values.split(',')
      constraints.each do |constraint|
        source_value = vals[args.index(constraint['source_parameter'])].to_f
        target_value = vals[args.index(constraint['target_parameter'])].to_f
        #Rails.logger.debug("Checkig if #{source_value} #{constraint['condition']} #{target_value}")
        unless source_value.send(constraint['condition'], target_value)
          return false
        end
      end

      true
    end

  end
end

