require_relative 'core/mongo_active_record'
require_relative 'logger'

require_relative 'model/experiment'

module Scalarm::Database

  ##
  # This is only module to build SimulationRun class with SimulationRunFactory.
  #
  # ==== Fields of SimulationRun instances include:
  #â€œ
  # index:: integer, index of simulation in context of experiment
  # experiment_id:: ObjectId
  # to_sent:: bool
  # sent_at:: timestamp
  # is_done:: bool
  # done_at:: timestamp
  # run_index:: integer
  # arguments:: string - list of concatenated parameter ids - DEPRECATED - use input_parameters instead
  # values:: string - list of concatenated parameter values - DEPRECATED - use input_parameters instead
  # input_parameters:: hash - input_parameter => value pairs for the run
  # result:: JSON structure generated by simulation
  #
  # This module can be mixin only for MongoActiveRecord classes
  module SimulationRun
    def where(conditions, options)
      super(conditions, {sort: [['index', :asc]]}.merge(options))
    end

    def meet_constraints?(constraints)
      return true if constraints.blank?

      args = arguments.split(',')
      vals = values.split(',')
      constraints.each do |constraint|
        source_value = vals[args.index(constraint['source_parameter'])].to_f
        target_value = vals[args.index(constraint['target_parameter'])].to_f
        #Rails.logger.debug("Checking if #{source_value} #{constraint['condition']} #{target_value}")
        unless source_value.send(constraint['condition'], target_value)
          return false
        end
      end

      true
    end

    def arguments
      if attributes.include?('input_parameters')
        attributes['input_parameters'].keys.join(',')
      elsif attributes.include?('arguments')
        attributes['arguments']
      else
        nil
      end
    end

    def values
      if attributes.include?('input_parameters')
        attributes['input_parameters'].values.join(',')
      elsif attributes.include?('values')
        attributes['values']
      else
        nil
      end
    end

    def input_parameters
      if attributes.include?('input_parameters')
        attributes['input_parameters']
      elsif attributes.include?('arguments') and attributes.include?('values')
        Hash[*attributes['arguments'].split(',').zip(attributes['values'].split(',')).flatten]
      else
        {}
      end
    end

  end

  # Defines SimulationRun class methods
  module SimulationRunClass
    def create_table
      raise('No Simulation Run DB available') if collection.nil?

      collection.indexes.create_one({"index" => 1}, {unique: true})
      collection.indexes.create_one({"sm_uuid" => 1})
      collection.indexes.create_one({"result" => 1})
      collection.indexes.create_one({is_done: 1, to_sent: 1})
    end
  end

  # Allows to create SimulationRun model (class) dedicated for specific Experiment
  class SimulationRunFactory
    def self.for_experiment(experiment_id)
      Class.new(Scalarm::Database::MongoActiveRecord) do |c|
        extend SimulationRunClass
        include SimulationRun

        def self.collection_name_for(experiment_id)
          "experiment_instances_#{experiment_id}"
        end

        use_collection collection_name_for(experiment_id)
        attr_join :experiment, Scalarm::Database::Model::Experiment
      end
    end

  end
end